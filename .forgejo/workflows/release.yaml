# SPDX-FileCopyrightText: 2024 Mathieu Fenniak <mathieu@fenniak.net>
#
# SPDX-License-Identifier: GPL-3.0-or-later

name: release

on:
  workflow_dispatch:
  schedule:
    - cron: "30 14 * * 3"

# don't allow multiple simultaneous runs, that will be confusing
concurrency: release

jobs:
  release:
    name: testtrim-release # no whitespace; https://github.com/containers/podman/issues/24869
    runs-on: debian-ci-latest
    container:
      options: --volume nix-forgejo-cache-public:/nix
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository.
      contents: write
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          # Needs the entire history in order for git-cliff to work correctly.
          fetch-depth: 0
          # Use a deploy key for the checkout, so that when we `git push` later we conform to the `main` branch
          # protection rule.
          ssh-key: ${{ secrets.TESTTRIM_ACTIONS_SSH_KEY }}
          # known_hosts for ssh to work with
          ssh-known-hosts: |
            # codeberg.org:22 SSH-2.0-OpenSSH_9.2p1 Debian-2+deb12u3
            codeberg.org ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8hZi7K1/2E2uBX8gwPRJAHvRAob+3Sn+y2hxiEhN0buv1igjYFTgFO2qQD8vLfU/HT/P/rqvEeTvaDfY1y/vcvQ8+YuUYyTwE2UaVU5aJv89y6PEZBYycaJCPdGIfZlLMmjilh/Sk8IWSEK6dQr+g686lu5cSWrFW60ixWpHpEVB26eRWin3lKYWSQGMwwKv4LwmW3ouqqs4Z4vsqRFqXJ/eCi3yhpT+nOjljXvZKiYTpYajqUC48IHAxTWugrKe1vXWOPxVXXMQEPsaIRc2hpK+v1LmfB7GnEGvF1UAKnEZbUuiD9PBEeD5a1MZQIzcoPWCrTxipEpuXQ5Tni4mN
            # codeberg.org:22 SSH-2.0-OpenSSH_9.2p1 Debian-2+deb12u3
            codeberg.org ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBL2pDxWr18SoiDJCGZ5LmxPygTlPu+cCKSkpqkvCyQzl5xmIMeKNdfdBpfbCGDPoZQghePzFZkKJNR/v9Win3Sc=
            # codeberg.org:22 SSH-2.0-OpenSSH_9.2p1 Debian-2+deb12u3
            codeberg.org ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIVIC02vnjFyL+I4RHfvIGNtOgJMe769VTF1VR4EB3ZB
            # codeberg.org:22 SSH-2.0-OpenSSH_9.2p1 Debian-2+deb12u3
            # codeberg.org:22 SSH-2.0-OpenSSH_9.2p1 Debian-2+deb12u3
      - uses: https://github.com/cachix/install-nix-action@c134e4c9e34bac6cab09cf239815f9339aaaf84e # v31
      # install-nix-action by default uses {{ github.token }} and configures it as a github token; makes sense, but
      # we're running as a Forgejo action so Forgejo puts its own token in {{ github.token }} which GitHub can't
      # understand. So we replace github.com in the access-token field of the nix.conf file.
      - run: sed -i 's/github.com/codeberg.org/' /etc/nix/nix.conf

      - run: |
          set -eux -o pipefail
          export NEW_VERSION=$(nix develop .# --command git cliff --bump --unreleased --context | nix develop .# --command jq -r .[0].version)
          if [[ "$NEW_VERSION" == "null" ]]; then
            # No changes since last release.
            exit 0
          fi
          echo NEW_VERSION = $NEW_VERSION
          nix develop .# --command git cliff --tag $NEW_VERSION -o ./CHANGELOG.md
          # Minimal version of the `gif cliff` output, with just the sections and commits, is used for the release body:
          nix develop .# --command git cliff --tag $NEW_VERSION --unreleased --strip all \
            --body '
              testtrim is an intelligent test selection tool which uses code coverage data, system call tracing, git change analysis, and a historical database in order to identify the minimum set of tests required to verify a commit is regression-free.

              All notable changes in this release are listed below.  These notes are automatically generated from git commit logs using [git-cliff](https://git-cliff.org):

              {% for group, commits in commits | group_by(attribute="group") %}
                ### {{ group | striptags | trim | upper_first }}
                {% for commit in commits %}
                    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}{% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }}
                {% endfor %}
            {% endfor %}
            ' > ./this-release-notes.md

          # Update version in Cargo.toml and Cargo.lock.  It seemed like it would be useful to use the cargo-edit tool
          # which has a `cargo set-version ...` command, but that doesn't update the lock file
          # (https://github.com/killercup/cargo-edit/issues/698) itself, leaving you in a position of needing to do a
          # build or upgrade, which I don't want the release process to do.
          sed -i "s/^version = \".*\"/version = \"${NEW_VERSION#v}\"/" ./**/Cargo.toml
          sed -i "/name = \"testtrim[^\"]*\"/,/version =/s/version = \".*\"/version = \"${NEW_VERSION#v}\"/" Cargo.lock

          git config --global user.name "release-workflow"
          git config --global user.email "release-workflow@testtrim.org"
          git add ./CHANGELOG.md ./**/Cargo.toml ./Cargo.lock
          git commit -m"chore(release): prepare for $NEW_VERSION"
          git tag $NEW_VERSION -F ./this-release-notes.md
          git push
          git push --tag
          # Need a clean working directory for the cargo publish
          RELEASE_BODY=$(cat ./this-release-notes.md)
          rm ./this-release-notes.md

          # Retry function for the release creation -- the codeberg API seems to have errors intermittently which I'd
          # guess (w/ no evidence) is due to trying to create the release so quickly after the tag is uploaded.
          for i in {1..3}; do
            if curl -X 'POST' \
              --fail-with-body \
              'https://codeberg.org/api/v1/repos/testtrim/testtrim/releases' \
              -H 'Accept: application/json' \
              -H 'Content-Type: application/json' \
              -H "Authorization: token $GITHUB_TOKEN" \
              -d "$(jq -n \
                  --arg version "$NEW_VERSION" \
                  --arg body "$RELEASE_BODY" \
                  '{
                    tag_name: $version,
                    target_commitish: $version,
                    name: $version,
                    body: $body
                  }'
                )";
            then
              echo "Release creation successful"
              break
            else
              if [ $i -lt 3 ]; then
                echo "Release creation failed, attempt $i of 3. Retrying in 10 seconds..."
                sleep 10
              else
                echo "Release creation failed after 3 attempts"
                exit 1
              fi
            fi
          done

      - run: |
          nix develop .# --command cargo publish --no-verify -p testtrim --token ${{ secrets.CRATES_IO_TESTTRIM_TOKEN }}
