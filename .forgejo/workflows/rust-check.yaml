# SPDX-FileCopyrightText: 2024 Mathieu Fenniak <mathieu@fenniak.net>
#
# SPDX-License-Identifier: GPL-3.0-or-later

name: Rust Checks

on:
  push:
    # When new releases are tagged, both the tag and the push to main will build if we just do `on: [push]` -- so
    # instead we filter to just branch pushes which should disable the second build on the tag.
    branches:
      - '**'

jobs:
  rust-checks:
    runs-on: debian-latest
    container:
      options: --volume nix-forgejo-cache-public:/nix

    services:
      pgsql:
        image: postgres:17@sha256:c522082e582d6267630d0ac3a857e262f4994012e2f841fc9eb65e7bd0500e20
        env:
          POSTGRES_USER: testtrim
          POSTGRES_PASSWORD: testtrim

    env:
      TESTTRIM_DATABASE_URL: https://experimental.testtrim.org/
      RUST_BACKTRACE: "1"

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          # testtrim needs ancestor commits in order to identify changes relevant to running tests; `fetch-depth: 0`
          # would be the safest in order to ensure the "last commit we have coverage data" is available, but if it slows
          # the repo checkout down too much it could probably be changed to a handful of commits instead.
          fetch-depth: 0
      - run: apt-get update && apt-get install -y sudo postgresql-client # install-nix-actions requires `sudo`...
      - name: verify pgsql service is available
        env:
          DATABASE_URL: postgres://testtrim:testtrim@pgsql/testtrim
        run: timeout 30 bash -c 'while ! psql $DATABASE_URL -c "SELECT 1"; do sleep 1; done'
      - uses: https://github.com/cachix/install-nix-action@02a151ada4993995686f9ed4f1be7cfbb229e56f # v31
      # install-nix-action by default uses {{ github.token }} and configures it as a github token; makes sense, but
      # we're running as a Forgejo action so Forgejo puts its own token in {{ github.token }} which GitHub can't
      # understand. So we replace github.com in the access-token field of the nix.conf file.
      - run: sed -i 's/github.com/codeberg.org/' /etc/nix/nix.conf

      - name: verify clippy warning-free
        run: nix develop .# --command cargo clippy -- -D warnings
      - name: verify clippy on tests warning-free
        run: nix develop .# --command cargo clippy --tests -- -D warnings
      - name: verify rust format correct
        run: nix develop .# --command cargo fmt --all -- --check
      - name: copyright checks
        run: nix develop .# --command reuse lint

      - name: .sqlx verify clean & correct
        env:
          DATABASE_URL: postgres://testtrim:testtrim@pgsql/testtrim
        run: |
          nix develop .# --command sqlx migrate run --source ./db/postgres/migrations
          nix develop .# --command cargo sqlx prepare --workspace -- --tests
          if [ -z "$(git status --porcelain)" ]; then
            echo "Clean working directory. 👍"
          else
            echo "sqlx prepare resulted in an unclean working directory; run 'cargo sqlx prepare' and commit changes"
            git status
            exit 1
          fi

      - run: |
          VERSION=$(nix develop .# --command dasel -f ./testtrim-cli/Cargo.toml -r toml .package.version -w -)
          echo "Will use testtrim $VERSION:"
          FLAKE="git+https://codeberg.org/testtrim/testtrim.git?ref=refs/tags/v${VERSION}"
          nix run $FLAKE#testtrim -- --version
          echo "TESTTRIM=$FLAKE#testtrim" >> $GITHUB_ENV
      - name: get-test-identifiers -- output tests that will be run, and why
        run: nix develop .# --command nix run $TESTTRIM -- get-test-identifiers -v
      - name: build testtrim-syscall-test-app
        run: nix develop .# --command cargo build --bin testtrim-syscall-test-app
      - name: run-tests
        run: nix develop .# --command nix run $TESTTRIM -- run-tests -v --source-mode=clean-commit
        env:
          TESTTRIM_UNITTEST_PGSQL_URL: postgres://testtrim:testtrim@pgsql/testtrim
          RUST_COVERAGE_SPECIMEN_PAT: ${{ secrets.RUST_COVERAGE_SPECIMEN_PAT }}

      # There's always the risk that testtrim is broken and doesn't run all the necessary tests, especially when we're
      # using testtrim to test testtrim.  So as a backup, on the main branch only, also run all tests.  This will
      # minimize the blocking effect for time, but give a chance to identify any cases where tests fail but don't get
      # detected by testtrim.
      #
      # This isn't general advice to do for all users of testtrim -- there's an elevated risk here when considering
      # self-testing.
      - name: run all tests
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          TESTTRIM_UNITTEST_PGSQL_URL: postgres://testtrim:testtrim@pgsql/testtrim
          RUST_COVERAGE_SPECIMEN_PAT: ${{ secrets.RUST_COVERAGE_SPECIMEN_PAT }}
        run: nix develop .# --command cargo nextest run

      # This should more-or-less guarantee that the release artifact of the OCI container continues to build.  It sucks
      # to add another build of testtrim here in rust-checks.yaml, but the flake build is currently different-enough
      # because it has only access to the packages listed in `Cargo.lock`, and the eBPF program uses some dynamic
      # references that need to be manually managed in there.  So as-is, this is the only way to guarantee that the
      # release artifact build doesn't break.
      - name: nix build .#testtrim
        run: nix build .#testtrim
